UE = CS.UnityEngine
-- local util = require 'xlua.util'

require('PipeController')


distancePipeUpAndDown = 3.5
distanceBetweenPipes = 5
pipeSpawnTime = distanceBetweenPipes / pipe_velocity
m_pipeSpawnTime = 0

local aspectRatio = UE.Camera.main.aspect
local halfScreenWidthInUnits = UE.Camera.main.orthographicSize * aspectRatio
local spawnDistanceFromCameraBoundary = 1.5
pipeStartPosX = UE.Camera.main.transform.position.x + halfScreenWidthInUnits + spawnDistanceFromCameraBoundary



diffCenterPipePairs = 3.5
halfDiffCenterPipePairs = diffCenterPipePairs / 2

pipeScaleY = nil

pipeSpawnPos = GetVector3D(pipeStartPosX, 0, 0)

birdStartPos = UE.Camera.main.transform.position.x - halfScreenWidthInUnits + spawnDistanceFromCameraBoundary
bird = nil

cameraSize = UE.Camera.main.orthographicSize
camBoundaryTop = 1
-- Cần lấy size (scale Y) của death zone
deathZoneSizeY = 1



function SetUpPipeParas()
    local pipe_temp = CS.Extensions.LoadPrefab("PipeTop")
    pipeScaleY = pipe_temp:GetComponent(typeof(UE.Renderer)).bounds.size.y
end

function SetUpBird()
    birdPos = GetVector3D(birdStartPos, 0, 0)
    bird = Spawn("Bird", birdPos)
end

function SetupGameOverPanel()
    --self.gameOverPanel =  UE.GameObject.FindGameObjectWithTag("GameOverPanel")
    --print(UE.GameObject.FindGameObjectWithTag("GameOverPanel"))
    --print(self.gameOverPanel)
end


function LuaAwake()
    
    --print("Gameoverpanel = " .. self.gameOverPanel)
    SetUpPipeParas()
    SetUpBird()

    SpawnPipes()
end

function LuaStart()
    --SetupGameOverPanel()
end

function LuaUpdate()
    m_pipeSpawnTime = m_pipeSpawnTime + UE.Time.deltaTime

    if (m_pipeSpawnTime >= pipeSpawnTime) then      
        --UE.Debug.Log("Đã tới lúc spawn pipe")
        SpawnPipes()
        m_pipeSpawnTime = 0
    end
end



function LuaShowGameOverPanel()
    --print("Show GameOverPanel, gọi từ Lua")

    self.gameOverPanel:SetActive(true)
    UE.Time.timeScale = 0

    --[[
    gameOverPanel = UE.GameObject.FindGameObjectWithTag("GameOverPanel")
    --gameOverPanel = UE.Object.FindObjectOfType(typeof(CS.GameOverPanel))
    if (gameOverPanel ~= nil) then
        -- Stop the game
        UE.Time.timeScale = 0
        gameOverPanel:Show()
    end
    --]]

end

function LuaRestartGame()
    --print("Restart Game, gọi từ Lua")

    -- Continue the game
    UE.Time.timeScale = 1
    UE.SceneManagement.SceneManager.LoadScene(UE.SceneManagement.SceneManager.GetActiveScene().name)
end

function LuaQuitGame()
    UE.Application.Quit()
end




function SpawnPipes()
    -- Vị trí cho 2 pipe và score line
    local pipeUpPos = pipeSpawnPos + GetVector3D(0, distancePipeUpAndDown/2 + pipeScaleY/2, 0)
    local pipeDownPos = pipeSpawnPos - GetVector3D(0, distancePipeUpAndDown/2 + pipeScaleY/2, 0)
    -- Cộng thêm 1 ở x là để cho cái scoreLine nằm bên phải mấy cái pipe, nghĩa là phải nhảy qua khỏi pipe thì mới được cộng điểm
    local scoreLinePos = pipeSpawnPos

    -- Vị trí spawn mới cho 2 pipe tiếp theo
    local nextSpawnPos = pipeSpawnPos.y + UE.Random.Range(-halfDiffCenterPipePairs, halfDiffCenterPipePairs)
    adjustNextSpawnPos = UE.Mathf.Clamp(nextSpawnPos, -cameraSize + distancePipeUpAndDown/2 + deathZoneSizeY, cameraSize -distancePipeUpAndDown/2 - camBoundaryTop)
    pipeSpawnPos = GetVector3D(pipeStartPosX, adjustNextSpawnPos, 0)

    -- Tạo 2 pipes và score line
    Spawn("PipeTop", pipeUpPos)
    Spawn("PipeBottom", pipeDownPos)
    Spawn("ScoreLine", scoreLinePos)
end

function Spawn(path, pos)
    go = CS.Extensions.LoadPrefab(path)
    local x = UE.Object.Instantiate(go, pos, UE.Quaternion.identity)
    return x
end


function GetVector3D(x, y, z)
    return UE.Vector3(x, y, z)
end

function GetVector2D(x, y)
    return UE.Vector2(x, y)
end



